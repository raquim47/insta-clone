(()=>{"use strict";const e=({DBName:e,storeName:t,version:n})=>new Promise(((o,s)=>{const r=indexedDB.open(e,n);r.onupgradeneeded=e=>{const n=e.target.result;n.objectStoreNames.contains(t)||n.createObjectStore(t,{autoIncrement:!0})},r.onsuccess=()=>{o(r.result)},r.onerror=()=>{s(r.error)}})),t=(e,t)=>{const n=n=>e.transaction(t,n).objectStore(t);return{getDataFromStore:e=>new Promise(((t,o)=>{const s=n("readonly").get(e);s.onsuccess=()=>{t({...s.result,key:e})},s.onerror=()=>{o(s.error)}})),addDataToStore:e=>new Promise(((t,o)=>{const s=n("readwrite").add(e);s.onsuccess=()=>{t(s.result)},s.onerror=()=>{o(s.error)}})),getAllDataFromStore:()=>new Promise(((e,t)=>{const o=n("readonly").openCursor(),s=[];o.onsuccess=t=>{const n=t.target.result;n?(s.push({key:n.key,...n.value}),n.continue()):e(s)},o.onerror=()=>{t(o.error)}})),deleteDataFromStore:e=>new Promise(((t,o)=>{const s=n("readwrite").delete(e);s.onsuccess=()=>{t(s.result)},s.onerror=()=>{o(s.error)}})),updateDataInStore:(e,t)=>new Promise(((o,s)=>{const r=n("readwrite"),a=r.get(e);a.onsuccess=()=>{const n={...a.result,...t},c=r.put(n,e);c.onsuccess=()=>{o(c.result)},c.onerror=()=>{s(c.error)}},a.onerror=()=>{s(a.error)}}))}},n="no-croll",o="show",s="visible",r="write-mode",a="edit",c=()=>{const e=document.querySelector(".modal");e.classList.remove(s),document.body.classList.remove(n),setTimeout((()=>e.remove()),250)},d=e=>{const t=(e=>{const t=document.createElement("div");return t.classList.add("modal"),t.innerHTML='\n    <button class="modal__closeBtn">\n      <img\n        width="22px"\n        height="22px"\n        src="./src/img/close_icon.svg"\n        alt="close_icon_logo"\n      />\n    </button>\n  ',t.append(e),t.addEventListener("click",(e=>{e.target===t&&c()})),t.querySelector("button").addEventListener("click",c),t})(e());document.querySelector("body").prepend(t),document.body.classList.add(n),setTimeout((()=>t.classList.add(s)),20)},i={DBName:"instagram",storeName:"posts",version:1},l=n=>{console.log(key);const o=(e=>{const t=document.createElement("div");return t.classList.add("post-view"),t.innerHTML=`\n    <img src=${e.imageUrl} alt="post-image" />\n    <div id="postViewDefault" class="post-view__content post-view__content--default">\n      <p>${e.textContent}</p>\n      <div class="post-view__btns">\n        <button id="editBtn">수정하기</button>\n        <button id="deleteBtn">삭제하기</button>\n      </div>\n    </div>\n    <div id="editPostView" class="post-view__content post-view__content--edit">\n        <textarea></textarea>\n        <div class="post-view__btns">\n          <button id="confirmEditButton">수정</button>\n          <button id="cancelEditButton">취소</button>\n        </div>\n    </div>\n  `,t})(n),s=o.querySelector("#editBtn"),r=o.querySelector("#deleteBtn");return s.addEventListener("click",(()=>((n,o)=>{const s=n.querySelector("p"),r=n.querySelector("textarea"),c=n.querySelector("#confirmEditButton"),d=n.querySelector("#cancelEditButton");r.value=s.innerText,n.classList.add(a),c.addEventListener("click",(()=>{const c=r.value;(async(n,o)=>{try{const s=await e(i),r=t(s,i.storeName),a={textContent:o};return await r.updateDataInStore(n,a),n}catch(e){throw console.error("게시물 수정 중 오류가 발생했습니다:",e),e}})(o,c).then((()=>{s.innerText=c,n.classList.remove(a)})).catch((e=>{alert(e),n.classList.remove(a)}))})),d.addEventListener("click",(()=>{n.classList.remove(a)}))})(o,n.key))),r.addEventListener("click",(()=>(async n=>{if(window.confirm("정말로 삭제하시겠습니까?"))try{const o=await e(i),s=t(o,i.storeName);return await s.deleteDataFromStore(n),n}catch(e){throw console.error("게시물 삭제 중 오류가 발생했습니다:",e),e}})(n.key).then((e=>{p(e),c()})))),o},u=e=>{const t=!e.hasChildNodes(),n=document.querySelector(".empty");t?n.classList.add(o):n.classList.remove(o)},m=n=>{const o=document.createElement("li");return o.innerHTML=`<img src="${n.imageUrl}" />`,o.dataset.key=n.key,o.addEventListener("click",(async()=>{const n=await e(i),s=t(n,i.storeName),r=await s.getDataFromStore(parseInt(o.dataset.key));d((()=>l(r)))})),o},p=e=>{const t=document.querySelector(".posts__list"),n=t.querySelector(`[data-key="${e}"]`);t.removeChild(n),u(t)},v=n=>{const o=n.result;document.getElementById("addPostBtn").onclick=()=>{const n={textContent:document.getElementById("addPostText").value,imageUrl:o};(async(n,o,s)=>{if(window.indexedDB)try{const s=await e(i),r=t(s,i.storeName);o(await r.addDataToStore(n))}catch(e){console.error("Error: ",e),s()}})(n,(e=>{(e=>{const t=document.querySelector(".posts__list"),n=m(e);t.prepend(n),u(t)})({...n,key:e}),c()}),c)},(e=>{const t=document.querySelector(".add-post");document.getElementById("postImg").src=e,t.classList.add(r)})(o)},y=()=>{const e=(()=>{const e=document.createElement("div");return e.classList.add("add-post"),e.innerHTML='\n    <div class="add-post__header">\n      <button class="add-post__backBtn">\n        <img\n          width="32px"\n          height="24px"\n          src="./src/img/arrow_back_icon.svg"\n          alt="arrow_back_icon"\n        />\n      </button>\n      <h2>새 게시물 만들기</h2>\n      <button id="addPostBtn" class="add-post__registerBtn">등록하기</button>\n    </div>\n    \x3c!-- add-post__posts : Default is display none --\x3e\n    <div class="add-post__input">\n      <img id="postImg" alt="업로드 이미지" />\n      <div class="add-post__text">\n        <textarea id="addPostText" placeholder="텍스트 입력..." autofocus></textarea>\n      </div>\n    </div>\n    <div class="add-post__main">\n      <img src="./src/img/media_icon.svg" alt="media_icon" />\n      <h3>사진과 동영상을 업로드 해보세요.</h3>\n      <label for="uploadInput">컴퓨터에서 선택</label>\n      <input type="file" name="uploadInput" id="uploadInput" />\n    </div>\n  ',e})();return(e=>{const t=e.querySelector("#uploadInput"),n=e.querySelector(".add-post__backBtn");t.addEventListener("input",(e=>((e,t,n)=>{const o=new FileReader;o.readAsDataURL(e.files[0]),o.onload=()=>t(o),o.onerror=e=>{console.log("Error: ",e),n()}})(e.target,v,c))),n.addEventListener("click",(()=>{e.classList.remove(r)}))})(e),e};(async()=>{const n=document.getElementById("add-post-btn"),o=document.getElementById("firstPostBtn");if(n.addEventListener("click",(()=>d(y))),o.addEventListener("click",(()=>d(y))),window.indexedDB){const n=await e(i),o=t(n,i.storeName);(e=>{const t=document.querySelector(".posts__list");e.forEach((e=>{const n=m(e);t.prepend(n)})),u(t)})(await o.getAllDataFromStore())}})()})();